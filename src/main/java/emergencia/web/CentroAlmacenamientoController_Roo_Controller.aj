// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.web;

import emergencia.entidad.CentroAlmacenamiento;
import emergencia.entidad.Direccion;
import emergencia.entidad.Emergencia;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect CentroAlmacenamientoController_Roo_Controller {
    
    @Autowired
    private GenericConversionService CentroAlmacenamientoController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String CentroAlmacenamientoController.create(@Valid CentroAlmacenamiento centroAlmacenamiento, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("centroAlmacenamiento", centroAlmacenamiento);
            return "centroalmacenamientoes/create";
        }
        centroAlmacenamiento.persist();
        return "redirect:/centroalmacenamientoes/" + encodeUrlPathSegment(centroAlmacenamiento.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String CentroAlmacenamientoController.createForm(Model model) {
        model.addAttribute("centroAlmacenamiento", new CentroAlmacenamiento());
        List dependencies = new ArrayList();
        if (Direccion.countDireccions() == 0) {
            dependencies.add(new String[]{"direccion", "direccions"});
        }
        if (Emergencia.countEmergencias() == 0) {
            dependencies.add(new String[]{"emergencia", "emergencias"});
        }
        model.addAttribute("dependencies", dependencies);
        return "centroalmacenamientoes/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String CentroAlmacenamientoController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("centroalmacenamiento", CentroAlmacenamiento.findCentroAlmacenamiento(id));
        model.addAttribute("itemId", id);
        return "centroalmacenamientoes/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String CentroAlmacenamientoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("centroalmacenamientoes", CentroAlmacenamiento.findCentroAlmacenamientoEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) CentroAlmacenamiento.countCentroAlmacenamientoes() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("centroalmacenamientoes", CentroAlmacenamiento.findAllCentroAlmacenamientoes());
        }
        return "centroalmacenamientoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String CentroAlmacenamientoController.update(@Valid CentroAlmacenamiento centroAlmacenamiento, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("centroAlmacenamiento", centroAlmacenamiento);
            return "centroalmacenamientoes/update";
        }
        centroAlmacenamiento.merge();
        return "redirect:/centroalmacenamientoes/" + encodeUrlPathSegment(centroAlmacenamiento.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String CentroAlmacenamientoController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("centroAlmacenamiento", CentroAlmacenamiento.findCentroAlmacenamiento(id));
        return "centroalmacenamientoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String CentroAlmacenamientoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        CentroAlmacenamiento.findCentroAlmacenamiento(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/centroalmacenamientoes?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("direccions")
    public Collection<Direccion> CentroAlmacenamientoController.populateDireccions() {
        return Direccion.findAllDireccions();
    }
    
    @ModelAttribute("emergencias")
    public Collection<Emergencia> CentroAlmacenamientoController.populateEmergencias() {
        return Emergencia.findAllEmergencias();
    }
    
    Converter<Direccion, String> CentroAlmacenamientoController.getDireccionConverter() {
        return new Converter<Direccion, String>() {
            public String convert(Direccion direccion) {
                return new StringBuilder().append(direccion.getCalle()).append(" ").append(direccion.getNumero()).append(" ").append(direccion.getNumeroint()).toString();
            }
        };
    }
    
    Converter<Emergencia, String> CentroAlmacenamientoController.getEmergenciaConverter() {
        return new Converter<Emergencia, String>() {
            public String convert(Emergencia emergencia) {
                return new StringBuilder().append(emergencia.getUbicacion()).append(" ").append(emergencia.getNombre()).append(" ").append(emergencia.getFechaInicio()).toString();
            }
        };
    }
    
    @PostConstruct
    void CentroAlmacenamientoController.registerConverters() {
        conversionService.addConverter(getDireccionConverter());
        conversionService.addConverter(getEmergenciaConverter());
    }
    
    private String CentroAlmacenamientoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
