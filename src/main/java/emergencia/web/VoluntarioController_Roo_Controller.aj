// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.web;

import emergencia.entidad.Direccion;
import emergencia.entidad.EnumSexo;
import emergencia.entidad.Profesion;
import emergencia.entidad.Voluntario;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect VoluntarioController_Roo_Controller {
    
    @Autowired
    private GenericConversionService VoluntarioController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String VoluntarioController.create(@Valid Voluntario voluntario, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("voluntario", voluntario);
            addDateTimeFormatPatterns(model);
            return "voluntarios/create";
        }
        voluntario.persist();
        return "redirect:/voluntarios/" + encodeUrlPathSegment(voluntario.getIdVoluntario().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String VoluntarioController.createForm(Model model) {
        model.addAttribute("voluntario", new Voluntario());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Direccion.countDireccions() == 0) {
            dependencies.add(new String[]{"domicilioParticular", "direccions"});
        }
        if (Profesion.countProfesions() == 0) {
            dependencies.add(new String[]{"profesion", "profesions"});
        }
        model.addAttribute("dependencies", dependencies);
        return "voluntarios/create";
    }
    
    @RequestMapping(value = "/{idVoluntario}", method = RequestMethod.GET)
    public String VoluntarioController.show(@PathVariable("idVoluntario") Integer idVoluntario, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("voluntario", Voluntario.findVoluntario(idVoluntario));
        model.addAttribute("itemId", idVoluntario);
        return "voluntarios/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String VoluntarioController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("voluntarios", Voluntario.findVoluntarioEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Voluntario.countVoluntarios() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("voluntarios", Voluntario.findAllVoluntarios());
        }
        addDateTimeFormatPatterns(model);
        return "voluntarios/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String VoluntarioController.update(@Valid Voluntario voluntario, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("voluntario", voluntario);
            addDateTimeFormatPatterns(model);
            return "voluntarios/update";
        }
        voluntario.merge();
        return "redirect:/voluntarios/" + encodeUrlPathSegment(voluntario.getIdVoluntario().toString(), request);
    }
    
    @RequestMapping(value = "/{idVoluntario}", params = "form", method = RequestMethod.GET)
    public String VoluntarioController.updateForm(@PathVariable("idVoluntario") Integer idVoluntario, Model model) {
        model.addAttribute("voluntario", Voluntario.findVoluntario(idVoluntario));
        addDateTimeFormatPatterns(model);
        return "voluntarios/update";
    }
    
    @RequestMapping(value = "/{idVoluntario}", method = RequestMethod.DELETE)
    public String VoluntarioController.delete(@PathVariable("idVoluntario") Integer idVoluntario, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Voluntario.findVoluntario(idVoluntario).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/voluntarios?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("direccions")
    public Collection<Direccion> VoluntarioController.populateDireccions() {
        return Direccion.findAllDireccions();
    }
    
    @ModelAttribute("enumsexoes")
    public Collection<EnumSexo> VoluntarioController.populateEnumSexoes() {
        return Arrays.asList(EnumSexo.class.getEnumConstants());
    }
    
    @ModelAttribute("profesions")
    public Collection<Profesion> VoluntarioController.populateProfesions() {
        return Profesion.findAllProfesions();
    }
    
    Converter<Direccion, String> VoluntarioController.getDireccionConverter() {
        return new Converter<Direccion, String>() {
            public String convert(Direccion direccion) {
                return new StringBuilder().append(direccion.getCalle()).append(" ").append(direccion.getNumero()).append(" ").append(direccion.getNumeroint()).toString();
            }
        };
    }
    
    Converter<Voluntario, String> VoluntarioController.getVoluntarioConverter() {
        return new Converter<Voluntario, String>() {
            public String convert(Voluntario voluntario) {
                return new StringBuilder().append(voluntario.getAsignacion()).append(" ").append(voluntario.getNombre()).append(" ").append(voluntario.getCorreo()).toString();
            }
        };
    }
    
    @PostConstruct
    void VoluntarioController.registerConverters() {
        conversionService.addConverter(getDireccionConverter());
        conversionService.addConverter(getVoluntarioConverter());
    }
    
    void VoluntarioController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("voluntario_fechanacimiento_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    @RequestMapping(value = "/{idVoluntario}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String VoluntarioController.showJson(@PathVariable("idVoluntario") Integer idVoluntario) {
        return Voluntario.findVoluntario(idVoluntario).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VoluntarioController.createFromJson(@RequestBody String json) {
        Voluntario.fromJsonToVoluntario(json).persist();
        return new ResponseEntity<String>("Voluntario created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String VoluntarioController.listJson() {
        return Voluntario.toJsonArray(Voluntario.findAllVoluntarios());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VoluntarioController.createFromJsonArray(@RequestBody String json) {
        for (Voluntario voluntario: Voluntario.fromJsonArrayToVoluntarios(json)) {
            voluntario.persist();
        }
        return new ResponseEntity<String>("Voluntario created", HttpStatus.CREATED);
    }
    
    private String VoluntarioController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
