// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.entidad;

import emergencia.entidad.Persona;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Persona_Roo_Entity {
    
    declare @type: Persona: @Entity;
    
    declare @type: Persona: @Table(name = "persona", schema = "public");
    
    @PersistenceContext
    transient EntityManager Persona.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id_persona")
    private Integer Persona.idPersona;
    
    public Integer Persona.getIdPersona() {
        return this.idPersona;
    }
    
    public void Persona.setIdPersona(Integer id) {
        this.idPersona = id;
    }
    
    @Transactional
    public void Persona.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Persona.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Persona attached = this.entityManager.find(this.getClass(), this.idPersona);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Persona.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Persona Persona.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Persona merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Persona.entityManager() {
        EntityManager em = new Persona().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Persona.countPersonae() {
        return entityManager().createQuery("select count(o) from Persona o", Long.class).getSingleResult();
    }
    
    public static List<Persona> Persona.findAllPersonae() {
        return entityManager().createQuery("select o from Persona o", Persona.class).getResultList();
    }
    
    public static Persona Persona.findPersona(Integer id) {
        if (id == null) return null;
        return entityManager().find(Persona.class, id);
    }
    
    public static List<Persona> Persona.findPersonaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Persona o", Persona.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
