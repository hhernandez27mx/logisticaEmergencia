// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.web;

import emergencia.entidad.InstEncargada;
import emergencia.entidad.Usuario;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect InstEncargadaController_Roo_Controller {
    
    @Autowired
    private GenericConversionService InstEncargadaController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String InstEncargadaController.create(@Valid InstEncargada instEncargada, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("instEncargada", instEncargada);
            return "instencargadas/create";
        }
        instEncargada.persist();
        return "redirect:/instencargadas/" + encodeUrlPathSegment(instEncargada.getIdInstencargada().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String InstEncargadaController.createForm(Model model) {
        model.addAttribute("instEncargada", new InstEncargada());
        List dependencies = new ArrayList();
        if (Usuario.countUsuarios() == 0) {
            dependencies.add(new String[]{"reponsable", "usuarios"});
        }
        model.addAttribute("dependencies", dependencies);
        return "instencargadas/create";
    }
    
    @RequestMapping(value = "/{idInstencargada}", method = RequestMethod.GET)
    public String InstEncargadaController.show(@PathVariable("idInstencargada") Integer idInstencargada, Model model) {
        model.addAttribute("instencargada", InstEncargada.findInstEncargada(idInstencargada));
        model.addAttribute("itemId", idInstencargada);
        return "instencargadas/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String InstEncargadaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("instencargadas", InstEncargada.findInstEncargadaEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) InstEncargada.countInstEncargadas() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("instencargadas", InstEncargada.findAllInstEncargadas());
        }
        return "instencargadas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String InstEncargadaController.update(@Valid InstEncargada instEncargada, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("instEncargada", instEncargada);
            return "instencargadas/update";
        }
        instEncargada.merge();
        return "redirect:/instencargadas/" + encodeUrlPathSegment(instEncargada.getIdInstencargada().toString(), request);
    }
    
    @RequestMapping(value = "/{idInstencargada}", params = "form", method = RequestMethod.GET)
    public String InstEncargadaController.updateForm(@PathVariable("idInstencargada") Integer idInstencargada, Model model) {
        model.addAttribute("instEncargada", InstEncargada.findInstEncargada(idInstencargada));
        return "instencargadas/update";
    }
    
    @RequestMapping(value = "/{idInstencargada}", method = RequestMethod.DELETE)
    public String InstEncargadaController.delete(@PathVariable("idInstencargada") Integer idInstencargada, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        InstEncargada.findInstEncargada(idInstencargada).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/instencargadas?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("usuarios")
    public Collection<Usuario> InstEncargadaController.populateUsuarios() {
        return Usuario.findAllUsuarios();
    }
    
    Converter<InstEncargada, String> InstEncargadaController.getInstEncargadaConverter() {
        return new Converter<InstEncargada, String>() {
            public String convert(InstEncargada instEncargada) {
                return new StringBuilder().append(instEncargada.getNombre()).append(" ").append(instEncargada.getFunciones()).toString();
            }
        };
    }
    
    Converter<Usuario, String> InstEncargadaController.getUsuarioConverter() {
        return new Converter<Usuario, String>() {
            public String convert(Usuario usuario) {
                return new StringBuilder().append(usuario.getNombre()).append(" ").append(usuario.getContrasena()).append(" ").append(usuario.getConfcontrasena()).toString();
            }
        };
    }
    
    @PostConstruct
    void InstEncargadaController.registerConverters() {
        conversionService.addConverter(getInstEncargadaConverter());
        conversionService.addConverter(getUsuarioConverter());
    }
    
    @RequestMapping(value = "/{idInstencargada}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String InstEncargadaController.showJson(@PathVariable("idInstencargada") Integer idInstencargada) {
        return InstEncargada.findInstEncargada(idInstencargada).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InstEncargadaController.createFromJson(@RequestBody String json) {
        InstEncargada.fromJsonToInstEncargada(json).persist();
        return new ResponseEntity<String>("InstEncargada created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String InstEncargadaController.listJson() {
        return InstEncargada.toJsonArray(InstEncargada.findAllInstEncargadas());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InstEncargadaController.createFromJsonArray(@RequestBody String json) {
        for (InstEncargada instEncargada: InstEncargada.fromJsonArrayToInstEncargadas(json)) {
            instEncargada.persist();
        }
        return new ResponseEntity<String>("InstEncargada created", HttpStatus.CREATED);
    }
    
    private String InstEncargadaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
