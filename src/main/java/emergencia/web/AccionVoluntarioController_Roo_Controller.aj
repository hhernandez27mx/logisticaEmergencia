// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.web;

import emergencia.entidad.AccionVoluntario;
import emergencia.entidad.Emergencia;
import emergencia.entidad.Voluntario;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AccionVoluntarioController_Roo_Controller {
    
    @Autowired
    private GenericConversionService AccionVoluntarioController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String AccionVoluntarioController.create(@Valid AccionVoluntario accionVoluntario, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("accionVoluntario", accionVoluntario);
            addDateTimeFormatPatterns(model);
            return "accionvoluntarios/create";
        }
        accionVoluntario.persist();
        return "redirect:/accionvoluntarios/" + encodeUrlPathSegment(accionVoluntario.getIdAccionVol().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String AccionVoluntarioController.createForm(Model model) {
        model.addAttribute("accionVoluntario", new AccionVoluntario());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Voluntario.countVoluntarios() == 0) {
            dependencies.add(new String[]{"voluntario", "voluntarios"});
        }
        model.addAttribute("dependencies", dependencies);
        return "accionvoluntarios/create";
    }
    
    @RequestMapping(value = "/{idAccionVol}", method = RequestMethod.GET)
    public String AccionVoluntarioController.show(@PathVariable("idAccionVol") Long idAccionVol, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("accionvoluntario", AccionVoluntario.findAccionVoluntario(idAccionVol));
        model.addAttribute("itemId", idAccionVol);
        return "accionvoluntarios/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String AccionVoluntarioController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("accionvoluntarios", AccionVoluntario.findAccionVoluntarioEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) AccionVoluntario.countAccionVoluntarios() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("accionvoluntarios", AccionVoluntario.findAllAccionVoluntarios());
        }
        addDateTimeFormatPatterns(model);
        return "accionvoluntarios/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String AccionVoluntarioController.update(@Valid AccionVoluntario accionVoluntario, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("accionVoluntario", accionVoluntario);
            addDateTimeFormatPatterns(model);
            return "accionvoluntarios/update";
        }
        accionVoluntario.merge();
        return "redirect:/accionvoluntarios/" + encodeUrlPathSegment(accionVoluntario.getIdAccionVol().toString(), request);
    }
    
    @RequestMapping(value = "/{idAccionVol}", params = "form", method = RequestMethod.GET)
    public String AccionVoluntarioController.updateForm(@PathVariable("idAccionVol") Long idAccionVol, Model model) {
        model.addAttribute("accionVoluntario", AccionVoluntario.findAccionVoluntario(idAccionVol));
        addDateTimeFormatPatterns(model);
        return "accionvoluntarios/update";
    }
    
    @RequestMapping(value = "/{idAccionVol}", method = RequestMethod.DELETE)
    public String AccionVoluntarioController.delete(@PathVariable("idAccionVol") Long idAccionVol, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        AccionVoluntario.findAccionVoluntario(idAccionVol).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/accionvoluntarios?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("emergencias")
    public Collection<Emergencia> AccionVoluntarioController.populateEmergencias() {
        return Emergencia.findAllEmergencias();
    }
    
    @ModelAttribute("voluntarios")
    public Collection<Voluntario> AccionVoluntarioController.populateVoluntarios() {
        return Voluntario.findAllVoluntarios();
    }
    
    Converter<AccionVoluntario, String> AccionVoluntarioController.getAccionVoluntarioConverter() {
        return new Converter<AccionVoluntario, String>() {
            public String convert(AccionVoluntario accionVoluntario) {
                return new StringBuilder().append(accionVoluntario.getComentarios()).append(" ").append(accionVoluntario.getFechaInicio()).append(" ").append(accionVoluntario.getFechaFin()).toString();
            }
        };
    }
    
    Converter<Emergencia, String> AccionVoluntarioController.getEmergenciaConverter() {
        return new Converter<Emergencia, String>() {
            public String convert(Emergencia emergencia) {
                return new StringBuilder().append(emergencia.getUbicacion()).append(" ").append(emergencia.getNombre()).append(" ").append(emergencia.getFechaInicio()).toString();
            }
        };
    }
    
    Converter<Voluntario, String> AccionVoluntarioController.getVoluntarioConverter() {
        return new Converter<Voluntario, String>() {
            public String convert(Voluntario voluntario) {
                return new StringBuilder().append(voluntario.getNombre()).append(" ").append(voluntario.getCorreo()).append(" ").append(voluntario.getFechaNacimiento()).toString();
            }
        };
    }
    
    @PostConstruct
    void AccionVoluntarioController.registerConverters() {
        conversionService.addConverter(getAccionVoluntarioConverter());
        conversionService.addConverter(getEmergenciaConverter());
        conversionService.addConverter(getVoluntarioConverter());
    }
    
    void AccionVoluntarioController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("accionVoluntario_fechafin_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        model.addAttribute("accionVoluntario_fechainicio_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String AccionVoluntarioController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
