// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package emergencia.web;

import emergencia.entidad.Emergencia;
import emergencia.entidad.EmergenciaSuministro;
import emergencia.entidad.Suministro;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EmergenciaSuministroController_Roo_Controller {
    
    @Autowired
    private GenericConversionService EmergenciaSuministroController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String EmergenciaSuministroController.create(@Valid EmergenciaSuministro emergenciaSuministro, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("emergenciaSuministro", emergenciaSuministro);
            return "emergenciasuministroes/create";
        }
        emergenciaSuministro.persist();
        return "redirect:/emergenciasuministroes/" + encodeUrlPathSegment(emergenciaSuministro.getIdEmerSumi().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String EmergenciaSuministroController.createForm(Model model) {
        model.addAttribute("emergenciaSuministro", new EmergenciaSuministro());
        return "emergenciasuministroes/create";
    }
    
    @RequestMapping(value = "/{idEmerSumi}", method = RequestMethod.GET)
    public String EmergenciaSuministroController.show(@PathVariable("idEmerSumi") Integer idEmerSumi, Model model) {
        model.addAttribute("emergenciasuministro", EmergenciaSuministro.findEmergenciaSuministro(idEmerSumi));
        model.addAttribute("itemId", idEmerSumi);
        return "emergenciasuministroes/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String EmergenciaSuministroController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("emergenciasuministroes", EmergenciaSuministro.findEmergenciaSuministroEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) EmergenciaSuministro.countEmergenciaSuministroes() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("emergenciasuministroes", EmergenciaSuministro.findAllEmergenciaSuministroes());
        }
        return "emergenciasuministroes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String EmergenciaSuministroController.update(@Valid EmergenciaSuministro emergenciaSuministro, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("emergenciaSuministro", emergenciaSuministro);
            return "emergenciasuministroes/update";
        }
        emergenciaSuministro.merge();
        return "redirect:/emergenciasuministroes/" + encodeUrlPathSegment(emergenciaSuministro.getIdEmerSumi().toString(), request);
    }
    
    @RequestMapping(value = "/{idEmerSumi}", params = "form", method = RequestMethod.GET)
    public String EmergenciaSuministroController.updateForm(@PathVariable("idEmerSumi") Integer idEmerSumi, Model model) {
        model.addAttribute("emergenciaSuministro", EmergenciaSuministro.findEmergenciaSuministro(idEmerSumi));
        return "emergenciasuministroes/update";
    }
    
    @RequestMapping(value = "/{idEmerSumi}", method = RequestMethod.DELETE)
    public String EmergenciaSuministroController.delete(@PathVariable("idEmerSumi") Integer idEmerSumi, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        EmergenciaSuministro.findEmergenciaSuministro(idEmerSumi).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/emergenciasuministroes?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("emergencias")
    public Collection<Emergencia> EmergenciaSuministroController.populateEmergencias() {
        return Emergencia.findAllEmergencias();
    }
    
    @ModelAttribute("suministroes")
    public Collection<Suministro> EmergenciaSuministroController.populateSuministroes() {
        return Suministro.findAllSuministroes();
    }
    
    Converter<Emergencia, String> EmergenciaSuministroController.getEmergenciaConverter() {
        return new Converter<Emergencia, String>() {
            public String convert(Emergencia emergencia) {
                return new StringBuilder().append(emergencia.getUbicacion()).append(" ").append(emergencia.getNombre()).append(" ").append(emergencia.getFechaInicio()).toString();
            }
        };
    }
    
    Converter<EmergenciaSuministro, String> EmergenciaSuministroController.getEmergenciaSuministroConverter() {
        return new Converter<EmergenciaSuministro, String>() {
            public String convert(EmergenciaSuministro emergenciaSuministro) {
                return new StringBuilder().append(emergenciaSuministro.getCantidad()).toString();
            }
        };
    }
    
    Converter<Suministro, String> EmergenciaSuministroController.getSuministroConverter() {
        return new Converter<Suministro, String>() {
            public String convert(Suministro suministro) {
                return new StringBuilder().append(suministro.getNombre()).toString();
            }
        };
    }
    
    @PostConstruct
    void EmergenciaSuministroController.registerConverters() {
        conversionService.addConverter(getEmergenciaConverter());
        conversionService.addConverter(getEmergenciaSuministroConverter());
        conversionService.addConverter(getSuministroConverter());
    }
    
    @RequestMapping(value = "/{idEmerSumi}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String EmergenciaSuministroController.showJson(@PathVariable("idEmerSumi") Integer idEmerSumi) {
        return EmergenciaSuministro.findEmergenciaSuministro(idEmerSumi).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EmergenciaSuministroController.createFromJson(@RequestBody String json) {
        EmergenciaSuministro.fromJsonToEmergenciaSuministro(json).persist();
        return new ResponseEntity<String>("EmergenciaSuministro created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String EmergenciaSuministroController.listJson() {
        return EmergenciaSuministro.toJsonArray(EmergenciaSuministro.findAllEmergenciaSuministroes());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EmergenciaSuministroController.createFromJsonArray(@RequestBody String json) {
        for (EmergenciaSuministro emergenciaSuministro: EmergenciaSuministro.fromJsonArrayToEmergenciaSuministroes(json)) {
            emergenciaSuministro.persist();
        }
        return new ResponseEntity<String>("EmergenciaSuministro created", HttpStatus.CREATED);
    }
    
    private String EmergenciaSuministroController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
